// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/Bo0mer/executor"
	. "github.com/Bo0mer/executor/model"
)

type FakeExecutor struct {
	ExecuteStub        func(c Command) (stdout string, stderr string, exitCode int, err error)
	executeMutex       sync.RWMutex
	executeArgsForCall []struct {
		c Command
	}
	executeReturns struct {
		result1 string
		result2 string
		result3 int
		result4 error
	}
	ExecuteAsyncStub        func(c Command) <-chan CommandResult
	executeAsyncMutex       sync.RWMutex
	executeAsyncArgsForCall []struct {
		c Command
	}
	executeAsyncReturns struct {
		result1 <-chan CommandResult
	}
}

func (fake *FakeExecutor) Execute(c Command) (stdout string, stderr string, exitCode int, err error) {
	fake.executeMutex.Lock()
	fake.executeArgsForCall = append(fake.executeArgsForCall, struct {
		c Command
	}{c})
	fake.executeMutex.Unlock()
	if fake.ExecuteStub != nil {
		return fake.ExecuteStub(c)
	} else {
		return fake.executeReturns.result1, fake.executeReturns.result2, fake.executeReturns.result3, fake.executeReturns.result4
	}
}

func (fake *FakeExecutor) ExecuteCallCount() int {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return len(fake.executeArgsForCall)
}

func (fake *FakeExecutor) ExecuteArgsForCall(i int) Command {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return fake.executeArgsForCall[i].c
}

func (fake *FakeExecutor) ExecuteReturns(result1 string, result2 string, result3 int, result4 error) {
	fake.ExecuteStub = nil
	fake.executeReturns = struct {
		result1 string
		result2 string
		result3 int
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeExecutor) ExecuteAsync(c Command) <-chan CommandResult {
	fake.executeAsyncMutex.Lock()
	fake.executeAsyncArgsForCall = append(fake.executeAsyncArgsForCall, struct {
		c Command
	}{c})
	fake.executeAsyncMutex.Unlock()
	if fake.ExecuteAsyncStub != nil {
		return fake.ExecuteAsyncStub(c)
	} else {
		return fake.executeAsyncReturns.result1
	}
}

func (fake *FakeExecutor) ExecuteAsyncCallCount() int {
	fake.executeAsyncMutex.RLock()
	defer fake.executeAsyncMutex.RUnlock()
	return len(fake.executeAsyncArgsForCall)
}

func (fake *FakeExecutor) ExecuteAsyncArgsForCall(i int) Command {
	fake.executeAsyncMutex.RLock()
	defer fake.executeAsyncMutex.RUnlock()
	return fake.executeAsyncArgsForCall[i].c
}

func (fake *FakeExecutor) ExecuteAsyncReturns(result1 <-chan CommandResult) {
	fake.ExecuteAsyncStub = nil
	fake.executeAsyncReturns = struct {
		result1 <-chan CommandResult
	}{result1}
}

var _ executor.Executor = new(FakeExecutor)
